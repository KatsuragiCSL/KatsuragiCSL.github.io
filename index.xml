<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Script Adults</title><link>https://katsuragicsl.github.io/</link><description>Recent content on Script Adults</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 13 Apr 2022 21:08:19 +0800</lastBuildDate><atom:link href="https://katsuragicsl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Prisma Cloud Defenders</title><link>https://katsuragicsl.github.io/posts/2022/07/prisma-cloud-defenders/</link><pubDate>Wed, 20 Jul 2022 17:54:24 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/07/prisma-cloud-defenders/</guid><description>Tl;dr - unfixed information disclosure in Prisma Cloud defenders This post is about how to abuse a agent of a cloud security solution to get information which you should not know, like what security controls are applied, what assets the victim owns and the owners of the assets.
Introduction A few months ago I was examining the Prisma Cloud configuration of my workplace and accidentally discovered an information disclosure issue of Prisma Cloud defender (the agent).</description></item><item><title>Flaws of Maximum Munch in (F)lex</title><link>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</link><pubDate>Sat, 04 Jun 2022 16:26:45 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</guid><description>Introduction Recently I am studying compilers and it reminds me a vulnerability class which is called ReDOS I saw a long time ago. This post will discuss some flaws of lexers, specifically on flex.
Lexer In theory, a compiler contains 5 components:
Lexical analyzer -&amp;gt; identifying tokens (valid &amp;ldquo;words&amp;rdquo; of the source language) Parser -&amp;gt; identifying grammatical structure Semantic analyzer -&amp;gt; identifying semantics (e.g. binding objects to identifiers) Optimizer -&amp;gt; optimizing the programs Code generator -&amp;gt; generate the target language The job of a lexical analyzer, or lexer, scanner, is providing the type and value of a token when fed with input (intended to be code written in source language).</description></item><item><title>Classic API Unhooking</title><link>https://katsuragicsl.github.io/posts/2022/04/classic-api-unhooking/</link><pubDate>Thu, 14 Apr 2022 20:54:39 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/04/classic-api-unhooking/</guid><description>Introduction AV and EDR use API hoooking to monitor API calls of processes. This post will take a brief look on how does a hook look like and the classic solution for malwares to bypass API hooking.
I tested the content of this blog in a windows 10 VM with BitDefender installed.
You can get the sample code here.
API hooking On the Windows VM with BitDefender installed, if you load a PE into x64dbg and look for NtMapViewOfSection, you will see the first instruction is jmp to something.</description></item><item><title>About</title><link>https://katsuragicsl.github.io/about/</link><pubDate>Wed, 13 Apr 2022 21:08:19 +0800</pubDate><guid>https://katsuragicsl.github.io/about/</guid><description>Hi, I am KatsuragiCSL, just another security enthusiast who like writing. I do (web/mobile) pentesting as my daytime job, sometimes redteaming and other weird stuffs. At night, I play with malwares (both writing them and dissecting them), explore the secrets of binaries.
This blog is a place for me to share what I learnt, what I experimented, occationally some tutorial series and shitposting :) You can connect with me on Linkedin or ping me on twitter if you like.</description></item></channel></rss>