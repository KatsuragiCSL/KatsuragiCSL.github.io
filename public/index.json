[{"content":"Introduction Recently I am trying to reverse engineering a simple Windows desktop game made with Unity. I took a look on some reference but found that the setup can be a bit frustrating. This post is attempting to make the setup clearer and more followable. Reference links are listed below.\nTools Our target is to decompile and debug the Assembly-CSharp.dll inside the folder \u0026lt;game root folder\u0026gt;\\\u0026lt;GANE_NAME\u0026gt;_Data\\Managed\\, which contains custom code the game developer wrote, not the code of Unity or other frameworks. It is written in C#. We need the below tools:\ndnSpy dotPeek (patched) de4dot Some files from official Unity Setup If you got a DEBUG build of the game, you are lucky, you can skip almost all the steps below and just use dnSpy to decompile, debug and modify the code (discussed below). But if you are not insider of the game development team and the team is not stupid enough (or, unfortunately, didn\u0026rsquo;t get enough sleep) to release a debug build to production, you will be dealing with a RELEASE build.\nFortunately, there is a way to tweak the release build to debug build.\nStep 1 Check the version of Unity of the game. Open the file \u0026lt;game root folder\u0026gt;\\\u0026lt;game name\u0026gt;_Data\\globalgamemanagers.assets with notepad, the version of Unity will be shown at the beginning.\nStep 2 Go to https://unity.com/releases/editor/archive and download the correct version of Unity. Install it.\nStep 3 Go to \u0026lt;Unity root\u0026gt;\\Editor\\Data\\PlaybackEngines\\windowsstandalonesupport\\Variations\\win32_development_mono if the game is 32bit, otherwise go to \u0026lt;Unity root\u0026gt;\\Editor\\Data\\PlaybackEngines\\windowsstandalonesupport\\Variations\\win64_development_mono.\nCopy Data\\Managed folder to the corr. folder of the game. Copy WindowsPlayer.exe and UnityPlayer.dll. Rename to \u0026lt;GAME_NAME\u0026gt;.exe. Copy \u0026lt;Unity root\u0026gt;\\Editor\\Data\\MonoBleedingEdge\\bin\\mono-2.0-bdwgc.dl to \u0026lt;GAME_NAME\u0026gt;\\MonoBleedingEdge. Create of edit boot.config and ensure the line player-connection-debug=1 presents. Step 4 Download this de4dot fork and compile it locally by Visual Studio.\nStep 5 Run de4dot.exe -f Assembly-CSharp.dll -o \u0026lt;output dll location\u0026gt; -fpdb. Remove the output pdb file.\nStep 6 Load the output dll into dotPeek.\nRight click on the output dll and select Export to Project Check the box Create *.pdb file Export Step 7 Run the following command: \u0026quot;%UNITY_MONO%\\bin\\mono.exe\u0026quot; \u0026quot;%UNITY_MONO%\\lib\\mono\\4.5\\pdb2mdb.exe\u0026quot; \u0026quot;\u0026lt;target_assembly_dll\u0026gt;\u0026quot; where \u0026quot;%UNITY_MONO% is equal to \u0026lt;Unity root\u0026gt;\\Editor\\Data\\MonoBleedingEdge.\nYou will get a .mdb file. Now you can debug with dnSpy the dll located in the same folder.\nReference Debugging Unity Games Let\u0026rsquo;s Play with Fire Wiki DotPeek PDB generation for assemblies without debug directory ","permalink":"https://katsuragicsl.github.io/blogs/reverse-engineering/unity-game-reversing-1/","summary":"Introduction Recently I am trying to reverse engineering a simple Windows desktop game made with Unity. I took a look on some reference but found that the setup can be a bit frustrating. This post is attempting to make the setup clearer and more followable. Reference links are listed below.\nTools Our target is to decompile and debug the Assembly-CSharp.dll inside the folder \u0026lt;game root folder\u0026gt;\\\u0026lt;GANE_NAME\u0026gt;_Data\\Managed\\, which contains custom code the game developer wrote, not the code of Unity or other frameworks.","title":"Unity Game Reversing(1): Setup"},{"content":"Introduction LOTS project, founded by mrd0x, is a collection of websites which is likely be trusted but can be used to evade detection when conducting phishing, C\u0026amp;C, exfiltration and downloading tools. In this post I will introduce a way to abusing PayPal and hopefully will be contributing to the LOTS project.\nThis series is (intentively) for my ideas on novel exfiltration/ C\u0026amp;C channels.\nExfiltraftion by Paypal In Paypal, one can dispute an order and upload his/ her evidence. This feature can be used as data exfiltration channel.\nWhile the document states that the dispute only accepts JPG, GIF, PNG and PDF, it is not complicated to pass this requirement by prepending the magic number of GIF to the file being uploaded (tested in API sandbox):\nprintf \u0026quot;\\x47\\x49\\x46\\x38\\x37\\x61\u0026quot; | cat - realfile \u0026gt; fakegif\nSucessfully uploaded on Paypal:\nAdvantages Evading SSL inspection\nOrganization which cares employeesâ€™ privacy (getting more these years) exempts some websites from SSL inspection:\nHealthcare Payments etc Example: Policy of Geoscience Australia (under Australian gov) ","permalink":"https://katsuragicsl.github.io/blogs/post-exploitation/lots-project-paypal/","summary":"Introduction LOTS project, founded by mrd0x, is a collection of websites which is likely be trusted but can be used to evade detection when conducting phishing, C\u0026amp;C, exfiltration and downloading tools. In this post I will introduce a way to abusing PayPal and hopefully will be contributing to the LOTS project.\nThis series is (intentively) for my ideas on novel exfiltration/ C\u0026amp;C channels.\nExfiltraftion by Paypal In Paypal, one can dispute an order and upload his/ her evidence.","title":"LOTS Project - Paypal"},{"content":"Introduction Recently I am hooked on fuzzing. Apart from \u0026ldquo;normal\u0026rdquo; fuzzing following the textbook examples, I tried to fuzz nmap because\nIt is fun Seems no blog posts about fuzzing nmap yet, it surprised me, and hence, it is fun, again. \u0026#x1f60f; As my first target, I am going to fuzz the nse of nmap. NSE (nmap scripting engine) parses the scripts provided in --script and provide additional scanning according to how the script is written. For instance, the http-title.nse comes with the stock nmap tries to grab the web page\u0026rsquo;s title if there are ports running http:\nroot@develop:~/nmap_fuzzing# ./install/bin/nmap 127.0.0.1 -p 80 --script=install/share/nmap/scripts/http-title.nse Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-27 17:43 HKT Nmap scan report for localhost (127.0.0.1) Host is up (0.000094s latency). PORT STATE SERVICE 80/tcp open http |_http-title: Directory listing for / You may want to want to know how does a nmap script looks like by checking out here. Essentially nmap scripts consists of head, rules (the trigger of the actions) and actions, where actions are written in lua. We won\u0026rsquo;t dive into it until we talk about grammar-based fuzzing in the future.\nSetup and debugs We are testing on Ubuntu 20.04. Get the source code of nmap and decompress it following the guide.\nThere is something tricky when compiling nmap with afl C compilers. The first time I compiled nmap with the normal way:\nAFL_USE_ASAN=1 CC=~/AFLplusplus/afl-clang-fast CXX=~/AFLplusplus/afl-clang-fast++ ./configure --prefix=\u0026#34;$HOME/nmap_fuzzing/install/ When I tried to make it, it failed with some compiling errors:\nSeems addrinfo is redefined in nbase/nbase_ipv6.h, let\u0026rsquo;s take a look at this header file:\nThis suggests that if HAVE_GETADDRINFO is non-zero, the addrinfo struct will not be redefined in nbase/nbase_ipv6.h. Let\u0026rsquo;s edit ./nbase/nbase_config.h:\nAfter adding a line #define HAVE_GETADDRINFO 1, we saw make works by running AFL_USE_ASAN=1 make \u0026amp;\u0026amp; AFL_USE_ASAN=1 make install:\nFor corpus, we simply copy some nmap scripts for http that come with nmap. They are located at \u0026lt;directory where nmap installed\u0026gt;/share/nmap/scripts.\nAlso we will run a dummy http server on port 80 by python3 -m http.server 80, so that nmap can have a target to scan.\nFuzzing! By running afl-fuzz -m none -i $HOME/nmap_fuzzing/corpus_nmap_scripts/ -o $HOME/nmap_fuzzing/output/ -s 999 -- $HOME/nmap_fuzzing/install/bin/nmap 127.0.0.1 -p 80 --script @@, we see AFL is doing his job \u0026#x2764;\u0026#xfe0f;\nPitfalls and future improvement This fuzzing is not promising. There are a few reasons why it is bad to fuzz nmap in this way:\nIt is slow AFL runs nmap once for each test case \u0026#x1f634; nmap has to do port scans before running the script Many useless(for fuzzing NSE) code running and each nmap run has to wait for them to finish. It generates a lot of invalid nmap script files, or those will never be triggered by nmap The mutation engine of AFL does not aware of the syntax of nmap script files and generates a lot of invalid files Even the test cases have correct syntax, many of them may never be troggered because they don\u0026rsquo;t run for http service. For 1, we will handle it by writing a better harness and using persistent mode of afl++.\nFor 2, we will do grammar-based fuzzing to make sure we only generate test cases which are valid nmap script, and make sure they will be triggered during the test, probably by ensuring the generated nmap script is using prerule.\n","permalink":"https://katsuragicsl.github.io/blogs/fuzzing/fuzzing-nmap1-a-dumb-approach/","summary":"Introduction Recently I am hooked on fuzzing. Apart from \u0026ldquo;normal\u0026rdquo; fuzzing following the textbook examples, I tried to fuzz nmap because\nIt is fun Seems no blog posts about fuzzing nmap yet, it surprised me, and hence, it is fun, again. \u0026#x1f60f; As my first target, I am going to fuzz the nse of nmap. NSE (nmap scripting engine) parses the scripts provided in --script and provide additional scanning according to how the script is written.","title":"Fuzzing nmap(1): a Dumb Approach"},{"content":"Tl;dr - unfixed information disclosure in Prisma Cloud defenders This post is about how to abuse a agent of a cloud security solution to get information which you should not know, like what security controls are applied, what assets the victim owns and the owners of the assets.\nIntroduction A few months ago I was examining the Prisma Cloud configuration of my workplace and accidentally discovered an information disclosure issue of Prisma Cloud defender (the agent). This issue has been reported to Palo Alto as security disclosure, however Palo Alto declared that this is an expected behavior.\nWhile Palo Alto seems not considering it as a problem, I think it is at least a trick for post exploitation. Below is some background knowledge.\nPrisma Cloud Prisma Cloud is a cloud security solution developed by Palo Alto, providing features including monitoring processes in standalone hosts/ run as daemon set in a K8S cluster.\nThis is done by deploying an agent (which is called a defender) in the target host.\nTo do so, one needs permissions to Prisma Cloud in order to get an access token. Defender Manager is the most suitable role for an operator whose manager only wants him to help deploying defenders without letting him/ her know other information, for example monitoring rules.\nDigging the hole host Let\u0026rsquo;s get a Defender Manager role and install a host defender on a linux machine, let\u0026rsquo;s say machine A.\nTake a look at the directory /var/lib/twistlock/local_db/local/\u0026lt;version number\u0026gt;/messages/, connect is a big file containing a lot of configs, while some details are stored in other files in the same directory.\nWhy can I view things that has nothing to do with my host? Other assets like container registries /var/lib/twistlock/local_db/local/\u0026lt;version number\u0026gt;/connect\nFirewall rules that belongs to OTHER hosts /var/lib/twistlock/local_db/local/\u0026lt;version number\u0026gt;/hostAppFirewallPolicy\nContent of custom rules (e.g. process/ network monitoring) /var/lib/twistlock/local_db/local/\u0026lt;version number\u0026gt;/updateCustomRule\nAs a Defender Manager, all you are supposed to have is the root access in the host where the defender to be installed on. However, after installing defenders, you will be able to get information much more than just the info of that host. For example, reading custom rules on other hosts, let say, hosts which are more important and you don\u0026rsquo;t want to get caught when you have the chance to access them.\nThose could help you if you are an internal threat of a company which uses Prisma Cloud but don\u0026rsquo;t know this trick :)\n","permalink":"https://katsuragicsl.github.io/blogs/post-exploitation/prisma-cloud-defenders/","summary":"Tl;dr - unfixed information disclosure in Prisma Cloud defenders This post is about how to abuse a agent of a cloud security solution to get information which you should not know, like what security controls are applied, what assets the victim owns and the owners of the assets.\nIntroduction A few months ago I was examining the Prisma Cloud configuration of my workplace and accidentally discovered an information disclosure issue of Prisma Cloud defender (the agent).","title":"Prisma Cloud Defenders"},{"content":"Introduction AV and EDR use API hoooking to monitor API calls of processes. This post will take a brief look on how does a hook look like and the classic solution for malwares to bypass API hooking.\nI tested the content of this blog in a windows 10 VM with BitDefender installed.\nYou can get the sample code here.\nAPI hooking On the Windows VM with BitDefender installed, if you load a PE into x64dbg and look for NtMapViewOfSection, you will see the first instruction is jmp to something.\nThis is NOT how ZwMapViewOfSection looks like originally, but an inline hook on this function by BitDefender.\nBitDefender set the hook in order to perform its job before the function runs. In order to evade from BitDefender, you need to evade from this hook. The method discussed in this post is known as classic unhooking.\nCreating a view of a fresh copy of ntdll.dll This is the part responsible for creating a view of the fresh copy of ntdll.dll on disk.\nWe also need a handle of ntdll.dll which loaded into the current process. It is the one which (some of) its functions are hooked. Let\u0026rsquo;s call it pollutedNtdll.\nRewrite the .text section These few lines are for getting to the section header (and number of sections for iteration). If you are not familiar with PE structure, you could take a look at PE101 which has nice pictures. You may also want to refer to MSDN pages like this.\nWe also defined a DWORD variable oldprotect for saving the old access protection value.\nYou can get the number of sections in a PE file in the IMAGE_FILE_HEADER structure. We iterate through the sections and find the .text section.\nIf we get it, we make the .text section of pollutedNtdll writable, by VirtualProtect.\nNow we can copy the .text section from the fresh copy of ntdll.dll to the one polluted.\nFinally make sure we recover the access protection.\nNtdll.dll unhooked Now we set a breakpoint on an instruction after the unhooking (in this case it is where \u0026ldquo;done!\u0026rdquo; is printed).\nRun it and the breakpoint is hit:\nBack to the address of ZwMapViewOfSection, you can see the hook is gone.\nAfterword First of all, as a simple sample, I did not put any effort in obfuscating my function calls/ strings etc. So the code is definitely far from ready-to-go.\nThere will probably be posts about basic obfuscation in the future.\nAnd, is it a perfect solution for API unhooking? Of course not, as it\u0026rsquo;s called Classic unhooking :)\nIn fact, there is a part looks suspicious when we unhooking like this, as in the EDR\u0026rsquo;s point of view:\nWhy the heck is this process reading ntdll.dll from disk???1\nYes, normal process should not read ntdll.dll \u0026ldquo;manually\u0026rdquo;, as it should be automatically loaded. There will be posts about more advanced technique for unhooking in the future.\nhttps://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://katsuragicsl.github.io/blogs/malware-development/classic-api-unhooking/","summary":"Introduction AV and EDR use API hoooking to monitor API calls of processes. This post will take a brief look on how does a hook look like and the classic solution for malwares to bypass API hooking.\nI tested the content of this blog in a windows 10 VM with BitDefender installed.\nYou can get the sample code here.\nAPI hooking On the Windows VM with BitDefender installed, if you load a PE into x64dbg and look for NtMapViewOfSection, you will see the first instruction is jmp to something.","title":"Classic API Unhooking"}]