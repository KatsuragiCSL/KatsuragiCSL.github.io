<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>regex on Script Adults</title>
    <link>https://katsuragicsl.github.io/tags/regex/</link>
    <description>Recent content in regex on Script Adults</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 04 Jun 2022 16:26:45 +0800</lastBuildDate><atom:link href="https://katsuragicsl.github.io/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flaws of Maximum Munch in (F)lex</title>
      <link>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</link>
      <pubDate>Sat, 04 Jun 2022 16:26:45 +0800</pubDate>
      
      <guid>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</guid>
      <description>Introduction Recently I am studying compilers and it reminds me a vulnerability class which is called ReDOS I saw a long time ago. This post will discuss some flaws of lexers, specifically on flex.
Lexer In theory, a compiler contains 5 components:
 Lexical analyzer -&amp;gt; identifying tokens (valid &amp;ldquo;words&amp;rdquo; of the source language) Parser -&amp;gt; identifying grammatical structure Semantic analyzer -&amp;gt; identifying semantics (e.g. binding objects to identifiers) Optimizer -&amp;gt; optimizing the programs Code generator -&amp;gt; generate the target language  The job of a lexical analyzer, or lexer, scanner, is providing the type and value of a token when fed with input (intended to be code written in source language).</description>
    </item>
    
  </channel>
</rss>
