<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Script Adults</title><link>https://katsuragicsl.github.io/posts/</link><description>Recent content in Posts on Script Adults</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 17 Apr 2023 04:16:55 +0800</lastBuildDate><atom:link href="https://katsuragicsl.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity Game Reversing(1): Setup</title><link>https://katsuragicsl.github.io/posts/2023/04/unity-game-reversing1-setup/</link><pubDate>Mon, 17 Apr 2023 04:16:55 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2023/04/unity-game-reversing1-setup/</guid><description>Introduction Recently I am trying to reverse engineering a simple Windows desktop game made with Unity. I took a look on some reference but found that the setup can be a bit frustrating. This post is attempting to make the setup clearer and more followable. Reference links are listed below.
Tools Our target is to decompile and debug the Assembly-CSharp.dll inside the folder &amp;lt;game root folder&amp;gt;\&amp;lt;GANE_NAME&amp;gt;_Data\Managed\, which contains custom code the game developer wrote, not the code of Unity or other frameworks.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently I am trying to reverse engineering a simple Windows desktop game made with Unity. I took a look on some reference but found that the setup can be a bit frustrating. This post is attempting to make the setup clearer and more followable. Reference links are listed below.</p>
<h2 id="tools">Tools</h2>
<p>Our target is to decompile and debug the <code>Assembly-CSharp.dll</code> inside the folder <code>&lt;game root folder&gt;\&lt;GANE_NAME&gt;_Data\Managed\</code>, which contains custom code the game developer wrote, not the code of Unity or other frameworks. It is written in <code>C#</code>. We need the below tools:</p>
<ol>
<li><a href="https://github.com/dnSpy/dnSpy/">dnSpy</a></li>
<li><a href="https://www.jetbrains.com/decompiler/">dotPeek</a></li>
<li><a href="https://github.com/earnol/de4dot/tree/dotPeek">(patched) de4dot</a></li>
<li>Some files from official Unity</li>
</ol>
<h2 id="setup">Setup</h2>
<p>If you got a <code>DEBUG</code> build of the game, you are lucky, you can skip almost all the steps below and just use <code>dnSpy</code> to decompile, debug and modify the code (discussed below). But if you are not insider of the game development team and the team is not stupid enough (or, unfortunately, didn&rsquo;t get enough sleep) to release a debug build to production, you will be dealing with a <code>RELEASE</code> build.</p>
<p>Fortunately, there is a way to tweak the release build to debug build.</p>
<h3 id="step-1">Step 1</h3>
<p>Check the version of Unity of the game. Open the file <code>&lt;game root folder&gt;\&lt;game name&gt;_Data\globalgamemanagers.assets</code> with notepad, the version of Unity will be shown at the beginning.</p>
<p><img src="/unity_reversing1/unity_version.png" alt=""></p>
<h3 id="step-2">Step 2</h3>
<p>Go to <code>https://unity.com/releases/editor/archive</code> and download the correct version of Unity. Install it.</p>
<h3 id="step-3">Step 3</h3>
<p>Go to <code>&lt;Unity root&gt;\Editor\Data\PlaybackEngines\windowsstandalonesupport\Variations\win32_development_mono</code> if the game is 32bit, otherwise go to <code>&lt;Unity root&gt;\Editor\Data\PlaybackEngines\windowsstandalonesupport\Variations\win64_development_mono</code>.</p>
<p><img src="/unity_reversing1/mono.png" alt=""></p>
<ul>
<li>Copy <code>Data\Managed</code> folder to the corr. folder of the game.</li>
<li>Copy <code>WindowsPlayer.exe</code> and <code>UnityPlayer.dll</code>. Rename to <code>&lt;GAME_NAME&gt;.exe</code>.</li>
<li>Copy <code>&lt;Unity root&gt;\Editor\Data\MonoBleedingEdge\bin\mono-2.0-bdwgc.dl</code> to <code>&lt;GAME_NAME&gt;\MonoBleedingEdge</code>.</li>
<li>Create of edit <code>boot.config</code> and ensure the line <code>player-connection-debug=1</code> presents.</li>
</ul>
<h3 id="step-4">Step 4</h3>
<p>Download <a href="https://github.com/earnol/de4dot/tree/dotPeek">this de4dot fork</a> and compile it locally by Visual Studio.</p>
<h3 id="step-5">Step 5</h3>
<p>Run <code>de4dot.exe -f Assembly-CSharp.dll -o &lt;output dll location&gt; -fpdb</code>. Remove the output <code>pdb</code> file.</p>
<h3 id="step-6">Step 6</h3>
<p>Load the output dll into dotPeek.</p>
<ul>
<li>Right click on the output dll and select <code>Export to Project</code></li>
<li>Check the box <code>Create *.pdb file</code></li>
<li>Export</li>
</ul>
<h3 id="step-7">Step 7</h3>
<p>Run the following command:
<code>&quot;%UNITY_MONO%\bin\mono.exe&quot; &quot;%UNITY_MONO%\lib\mono\4.5\pdb2mdb.exe&quot; &quot;&lt;target_assembly_dll&gt;&quot;</code>
where <code>&quot;%UNITY_MONO%</code> is equal to <code>&lt;Unity root&gt;\Editor\Data\MonoBleedingEdge</code>.</p>
<p>You will get a <code>.mdb</code> file. Now you can debug with <code>dnSpy</code> the dll located in the same folder.</p>
<h2 id="reference">Reference</h2>
<ol>
<li><a href="https://github.com/dnSpy/dnSpy/wiki/Debugging-Unity-Games">Debugging Unity Games</a></li>
<li><a href="https://wiki.fireundubh.com/unity/turning-a-release-build-into-a-debug-build">Let&rsquo;s Play with Fire Wiki</a></li>
<li><a href="https://stackoverflow.com/questions/31299157/dotpeek-pdb-generation-for-assemblies-without-debug-directory">DotPeek PDB generation for assemblies without debug directory</a></li>
</ol>
]]></content></item><item><title>LOTS Project - Paypal</title><link>https://katsuragicsl.github.io/posts/2022/10/lots-project-paypal/</link><pubDate>Sun, 02 Oct 2022 00:54:30 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/10/lots-project-paypal/</guid><description>Introduction LOTS project, founded by mrd0x, is a collection of websites which is likely be trusted but can be used to evade detection when conducting phishing, C&amp;amp;C, exfiltration and downloading tools. In this post I will introduce a way to abusing PayPal and hopefully will be contributing to the LOTS project.
This series is (intentively) for my ideas on novel exfiltration/ C&amp;amp;C channels.
Exfiltraftion by Paypal In Paypal, one can dispute an order and upload his/ her evidence.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://lots-project.com/">LOTS project</a>, founded by <a href="https://twitter.com/mrd0x">mrd0x</a>, is a collection of websites which is likely be trusted but can be used to evade detection when conducting phishing, C&amp;C, exfiltration and downloading tools. In this post I will introduce a way to abusing <code>PayPal</code> and hopefully will be contributing to the LOTS project.</p>
<p>This series is (intentively) for my ideas on novel exfiltration/ C&amp;C channels.</p>
<h2 id="exfiltraftion-by-paypal">Exfiltraftion by Paypal</h2>
<p>In Paypal, one can dispute an order and upload his/ her evidence. This feature can be used as data exfiltration channel.</p>
<p><img src="/lots-project-paypal/paypal1.png" alt=""></p>
<p>While the document states that the dispute only accepts JPG, GIF, PNG and PDF, it is not complicated to pass this requirement by prepending the magic number of GIF to the file being uploaded (tested in API sandbox):</p>
<p><code>printf &quot;\x47\x49\x46\x38\x37\x61&quot; | cat - realfile &gt; fakegif</code></p>
<p>Sucessfully uploaded on Paypal:</p>
<p><img src="/lots-project-paypal/paypal3.png" alt=""></p>
<p><img src="/lots-project-paypal/paypal4.png" alt=""></p>
<h2 id="advantages">Advantages</h2>
<p><strong>Evading SSL inspection</strong></p>
<p>Organization which cares employees‚Äô privacy (getting more these years) exempts some websites from SSL inspection:</p>
<ul>
<li>Healthcare</li>
<li>Payments</li>
<li>etc
Example: <a href="http://web.archive.org/web/20220317001648/https://www.ga.gov.au/__data/assets/pdf_file/0011/88373/Privacy-Impact-Assessment-Secure-Sockets-Layer-SSL-Inspection-Project.pdf">Policy of Geoscience Australia (under Australian gov)</a></li>
</ul>
]]></content></item><item><title>Fuzzing nmap(1): a Dumb Approach</title><link>https://katsuragicsl.github.io/posts/2022/08/fuzzing-nmap1-a-dumb-approach/</link><pubDate>Sat, 27 Aug 2022 18:06:09 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/08/fuzzing-nmap1-a-dumb-approach/</guid><description>Introduction Recently I am hooked on fuzzing. Apart from &amp;ldquo;normal&amp;rdquo; fuzzing following the textbook examples, I tried to fuzz nmap because
It is fun Seems no blog posts about fuzzing nmap yet, it surprised me, and hence, it is fun, again. üòè As my first target, I am going to fuzz the nse of nmap. NSE (nmap scripting engine) parses the scripts provided in --script and provide additional scanning according to how the script is written.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently I am hooked on fuzzing. Apart from &ldquo;normal&rdquo; fuzzing following the textbook examples, I tried to fuzz nmap because</p>
<ol>
<li>It is fun</li>
<li>Seems no blog posts about fuzzing nmap yet, it surprised me, and hence, it is fun, again. üòè</li>
</ol>
<p>As my first target, I am going to fuzz the nse of nmap. NSE (nmap scripting engine) parses the scripts provided in <code>--script</code> and provide additional scanning according to how the script is written. For instance, the <code>http-title.nse</code> comes with the stock nmap tries to grab the web page&rsquo;s title if there are ports running http:</p>
<pre><code>root@develop:~/nmap_fuzzing# ./install/bin/nmap 127.0.0.1 -p 80 --script=install/share/nmap/scripts/http-title.nse
Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-27 17:43 HKT
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000094s latency).

PORT   STATE SERVICE
80/tcp open  http
|_http-title: Directory listing for /

</code></pre><p>You may want to want to know how does a nmap script looks like by checking out <a href="https://svn.nmap.org/nmap/scripts/http-title.nse">here</a>. Essentially nmap scripts consists of head, rules (the trigger of the actions) and actions, where actions are written in <code>lua</code>. We won&rsquo;t dive into it until we talk about grammar-based fuzzing in the future.</p>
<h2 id="setup-and-debugs">Setup and debugs</h2>
<p>We are testing on Ubuntu 20.04. Get the source code of nmap and decompress it following the <a href="https://nmap.org/book/inst-source.html#inst-configure">guide</a>.</p>
<p>There is something tricky when compiling nmap with afl C compilers. The first time I compiled nmap with the normal way:</p>
<pre><code>AFL_USE_ASAN=1 CC=~/AFLplusplus/afl-clang-fast CXX=~/AFLplusplus/afl-clang-fast++ ./configure --prefix=&quot;$HOME/nmap_fuzzing/install/
</code></pre><p>When I tried to <code>make</code> it, it failed with some compiling errors:</p>
<p><img src="/fuzzing_nmap1/fuzzing_nmap_1.png" alt=""></p>
<p>Seems <code>addrinfo</code> is redefined in <code>nbase/nbase_ipv6.h</code>, let&rsquo;s take a look at this header file:</p>
<p><img src="/fuzzing_nmap1/fuzzing_nmap_2.png" alt=""></p>
<p>This suggests that if <code>HAVE_GETADDRINFO</code> is non-zero, the <code>addrinfo</code> struct will not be redefined in <code>nbase/nbase_ipv6.h</code>. Let&rsquo;s edit <code>./nbase/nbase_config.h</code>:</p>
<p><img src="/fuzzing_nmap1/fuzzing_nmap_3.png" alt=""></p>
<p>After adding a line <code>#define HAVE_GETADDRINFO 1</code>, we saw <code>make</code> works by running <code>AFL_USE_ASAN=1 make &amp;&amp; AFL_USE_ASAN=1 make install</code>:</p>
<p><img src="/fuzzing_nmap1/fuzzing_nmap_4.png" alt=""></p>
<p>For corpus, we simply copy some nmap scripts for http that come with nmap. They are located at <code>&lt;directory where nmap installed&gt;/share/nmap/scripts</code>.</p>
<p>Also we will run a dummy http server on port 80 by <code>python3 -m http.server 80</code>, so that nmap can have a target to scan.</p>
<h2 id="fuzzing">Fuzzing!</h2>
<p>By running <code>afl-fuzz -m none -i $HOME/nmap_fuzzing/corpus_nmap_scripts/ -o $HOME/nmap_fuzzing/output/ -s 999 -- $HOME/nmap_fuzzing/install/bin/nmap 127.0.0.1 -p 80 --script @@</code>, we see AFL is doing his job ‚ù§</p>
<p><img src="/fuzzing_nmap1/fuzzing_nmap_5.png" alt=""></p>
<h2 id="pitfalls-and-future-improvement">Pitfalls and future improvement</h2>
<p>This fuzzing is not promising. There are a few reasons why it is bad to fuzz nmap in this way:</p>
<ol>
<li>It is slow
<ol>
<li>AFL runs nmap once for each test case üò¥</li>
<li>nmap has to do port scans before running the script</li>
<li>Many useless(for fuzzing NSE) code running and each nmap run has to wait for them to finish.</li>
</ol>
</li>
<li>It generates a lot of invalid nmap script files, or those will never be triggered by nmap
<ol>
<li>The mutation engine of AFL does not aware of the syntax of nmap script files and generates a lot of invalid files</li>
<li>Even the test cases have correct syntax, many of them may never be troggered because they don&rsquo;t run for http service.</li>
</ol>
</li>
</ol>
<p>For <strong>1</strong>, we will handle it by writing a better harness and using persistent mode of afl++.</p>
<p>For <strong>2</strong>, we will do grammar-based fuzzing to make sure we only generate test cases which are valid nmap script, and make sure they will be triggered during the test, probably by ensuring the generated nmap script is using <a href="https://nmap.org/book/nse-script-format.html#:~:text=will%20be%20run%3A-,prerule">prerule</a>.</p>
]]></content></item><item><title>Prisma Cloud Defenders</title><link>https://katsuragicsl.github.io/posts/2022/07/prisma-cloud-defenders/</link><pubDate>Wed, 20 Jul 2022 17:54:24 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/07/prisma-cloud-defenders/</guid><description>Tl;dr - unfixed information disclosure in Prisma Cloud defenders This post is about how to abuse a agent of a cloud security solution to get information which you should not know, like what security controls are applied, what assets the victim owns and the owners of the assets.
Introduction A few months ago I was examining the Prisma Cloud configuration of my workplace and accidentally discovered an information disclosure issue of Prisma Cloud defender (the agent).</description><content type="html"><![CDATA[<h2 id="tldr---unfixed-information-disclosure-in-prisma-cloud-defenders">Tl;dr - unfixed information disclosure in Prisma Cloud defenders</h2>
<p>This post is about how to abuse a agent of a cloud security solution to get information which you should not know, like what security controls are applied, what assets the victim owns and the owners of the assets.</p>
<h2 id="introduction">Introduction</h2>
<p>A few months ago I was examining the Prisma Cloud configuration of my workplace and accidentally discovered an information disclosure issue of Prisma Cloud defender (the agent). This issue has been reported to Palo Alto as security disclosure, however Palo Alto declared that this is an <a href="https://github.com/PaloAltoNetworks/prisma-cloud-docs/pull/400/commits/3f6d17e63170929a2be5f015a28034fd80631486">expected behavior</a>.</p>
<p><img src="/prisma-cloud-defenders/prisma1.png" alt=""></p>
<p>While Palo Alto seems not considering it as a problem, I think it is at least a trick for post exploitation. Below is some background knowledge.</p>
<h2 id="prisma-cloud">Prisma Cloud</h2>
<p>Prisma Cloud is a cloud security solution developed by Palo Alto, providing features including monitoring processes in standalone hosts/ run as daemon set in a K8S cluster.</p>
<p>This is done by deploying an agent (which is called a <strong>defender</strong>) in the target host.</p>
<p>To do so, one needs permissions to Prisma Cloud in order to get an access token. <strong>Defender Manager</strong> is the most suitable role for an operator whose manager only wants him to help deploying defenders without letting him/ her know other information, for example monitoring rules.</p>
<p><img src="/prisma-cloud-defenders/prisma2.png" alt=""></p>
<h2 id="digging-the--hole--host">Digging the  <del>hole</del>  host</h2>
<p>Let&rsquo;s get a <strong>Defender Manager</strong> role and install a host defender on a linux machine, let&rsquo;s say machine A.<br>
Take a look at the directory <code>/var/lib/twistlock/local_db/local/&lt;version number&gt;/messages/</code>, <code>connect</code> is a big file containing a lot of configs, while some details are stored in other files in the same directory.</p>
<p><img src="/prisma-cloud-defenders/message_dir.png" alt=""></p>
<h2 id="why-can-i-view-things-that-has-nothing-to-do-with-my-host">Why can I view things that has nothing to do with my host?</h2>
<ul>
<li>Other assets like container registries</li>
</ul>
<p><code>/var/lib/twistlock/local_db/local/&lt;version number&gt;/connect</code></p>
<p><img src="/prisma-cloud-defenders/assets.png" alt=""></p>
<ul>
<li>Firewall rules that belongs to <strong>OTHER</strong> hosts</li>
</ul>
<p><code>/var/lib/twistlock/local_db/local/&lt;version number&gt;/hostAppFirewallPolicy</code></p>
<p><img src="/prisma-cloud-defenders/hostappfirewallrule.png" alt=""></p>
<ul>
<li>Content of custom rules (e.g. process/ network monitoring)</li>
</ul>
<p><code>/var/lib/twistlock/local_db/local/&lt;version number&gt;/updateCustomRule</code></p>
<p><img src="/prisma-cloud-defenders/custom_rule_content.png" alt=""></p>
<p>As a <strong>Defender Manager</strong>, all you are supposed to have is the root access in the host where the defender to be installed on. However, after installing defenders, you will be able to get information much more than just the info of that host. For example, reading custom rules on other hosts, let say, hosts which are more important and you don&rsquo;t want to get caught when you have the chance to access them.</p>
<p>Those could help you if you are an internal threat of a company which uses Prisma Cloud but don&rsquo;t know this trick :)</p>
]]></content></item><item><title>Flaws of Maximum Munch in (F)lex</title><link>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</link><pubDate>Sat, 04 Jun 2022 16:26:45 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/06/flaws-of-maximum-munch-in-flex/</guid><description>Introduction Recently I am studying compilers and it reminds me a vulnerability class which is called ReDOS I saw a long time ago. This post will discuss some flaws of lexers, specifically on flex.
Lexer In theory, a compiler contains 5 components:
Lexical analyzer -&amp;gt; identifying tokens (valid &amp;ldquo;words&amp;rdquo; of the source language) Parser -&amp;gt; identifying grammatical structure Semantic analyzer -&amp;gt; identifying semantics (e.g. binding objects to identifiers) Optimizer -&amp;gt; optimizing the programs Code generator -&amp;gt; generate the target language The job of a lexical analyzer, or lexer, scanner, is providing the type and value of a token when fed with input (intended to be code written in source language).</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently I am studying compilers and it reminds me a vulnerability class which is called <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">ReDOS</a> I saw a long time ago. This post will discuss some flaws of lexers, specifically on <a href="https://github.com/westes/flex">flex</a>.</p>
<h2 id="lexer">Lexer</h2>
<p>In theory, a compiler contains 5 components:</p>
<ol>
<li><strong>Lexical analyzer</strong> -&gt; identifying tokens (<em>valid &ldquo;words&rdquo; of the source language</em>)</li>
<li><strong>Parser</strong> -&gt; identifying grammatical structure</li>
<li><strong>Semantic analyzer</strong> -&gt; identifying semantics (<em>e.g. binding objects to identifiers</em>)</li>
<li><strong>Optimizer</strong> -&gt; optimizing the programs</li>
<li><strong>Code generator</strong> -&gt; generate the target language</li>
</ol>
<p>The job of a lexical analyzer, or <strong>lexer</strong>, <strong>scanner</strong>, is providing the type and value of a token when fed with input (intended to be code written in source language).</p>
<p>For example, let say we have a source language <strong>L</strong> and all you can code with it is assigning an identifier or expressions to some another identifier by equal sign (of course it is absurd in reality). Then when the lexer is given the following as input:</p>
<p>$$x = 1$$</p>
<p>it should gives <code>&lt;Identifier, &quot;x&quot;&gt; &lt;operator, &quot;=&quot;&gt; &lt;numerics, &quot;1&quot;&gt;</code>, which specifies the type of each token.</p>
<p>At the same time it should be able to catch invalid input such as $$x &gt; 1$$, $$y???2$$.</p>
<p>Also, the lexer needs to deal with ambiguity such as in C++ nested templates</p>
<pre><code>Oh&lt;My&lt;God&gt;&gt;
</code></pre><p>the <code>&gt;&gt;</code> at the ends should be distinguishable from stream operator like which in</p>
<pre><code>std::cin &gt;&gt; something;
</code></pre><p>To achive its goal, lexers make use of regex to match input. Let&rsquo;s use flex as an example.</p>
<h2 id="flex-and-maximum-munch">Flex and Maximum Munch</h2>
<p>In short, flex is a lexer generator for C. It consumes flex code and output the  C implementation of the corresponding lexer.</p>
<p>A flex file has the following format<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre><code>%%
regex_1    {action_1}
regex_2    {actin_2}
[...]
</code></pre><p>The lexer it creates will take one char at a time and evaluates it. For example when input &ldquo;aaa&rdquo; is consumed by the lexer generated by the following flex code</p>
<pre><code>%%
aaa    {printf(&quot;aaa\n&quot;);}
b       {printf(&quot;b\n&quot;);}
</code></pre><p>the first &ldquo;a&rdquo; in the input is being evaluated. However, it doesn&rsquo;t match any rules above, so the lexer eats one more char and now it has &ldquo;aa&rdquo;. Again, it doesn&rsquo;t match any rules so we have &ldquo;aaa&rdquo; now. Finally it matches the first rule so the lexer <code>printf(&quot;aaa\n&quot;);</code></p>
<p>What if nothing got matched after reading the whole input?</p>
<p>That&rsquo;s why in reality we need a extra rule to catch anything we don&rsquo;t want (just like the default deny rule at the bottom in firewall)</p>
<pre><code>%%
aaa    {printf(&quot;aaa\n&quot;);}
b       {printf(&quot;b\n&quot;);}
 /*do nothing when hits anything else or newline*/
.|\n    {}
</code></pre><p>So now anything other than &ldquo;aaa&rdquo; and &ldquo;bbb&rdquo; will be ignored.</p>
<p>Wait, why is the lexer not matching <code>.|\n</code> when it is looking at the first &ldquo;a&rdquo;?</p>
<p>Here is the principle which called <strong>Maximum Munch</strong>.<br>
As its name suggests, when substrings <code>s_1</code> and <code>s_2</code> with <code>len(s_1) &gt; len(s_2)</code> of input <code>s</code> matches some rules, we should (and flex will) take <code>s_1</code>.<br>
Hence in the above case, &ldquo;aaa&rdquo; will be matched, instead of matching <code>.|\n</code> three times.</p>
<h2 id="flaws-of-maximum-munch">Flaws of Maximum Munch</h2>
<p>Imagine we need to read the string &ldquo;xxxx&rdquo; as two &ldquo;xx&rdquo;. Also &ldquo;xxx&rdquo; should be read as &ldquo;xxx&rdquo;.</p>
<p>A naive flex code to catch it will be:</p>
<pre><code>%%
xx    {printf(&quot;xx\n&quot;);}
xxx    {printf(&quot;xxx\n&quot;);}
</code></pre><p>but this is not going to work as expected. By maximum munch, &ldquo;xxxx&rdquo; will be read as &ldquo;xxx&rdquo; + &ldquo;x&rdquo; (unknown token).</p>
<p>How about this:</p>
<pre><code>%%
xxxx   {printf(&quot;We got two 'xx' !\n&quot;);}
xxx    {printf(&quot;xxx\n&quot;);}
</code></pre><p>it seems avoided &ldquo;xxx&rdquo; at he first glance but it is actually not what we want. This lexer reads the whole &ldquo;xxxx&rdquo; as <strong>1</strong> token, instead of <strong>2</strong> &ldquo;xx&rdquo; token. Maximum Munch does not work all the time!</p>
<p>Luckily, with the help of <a href="https://westes.github.io/flex/manual/Patterns.html">lookahead</a>, we can solve this problem:</p>
<pre><code>%%
xx    { printf(&quot;xx\n&quot;);}
xx/xx    { printf(&quot;xx,\n&quot;);}
xxx   { printf(&quot;xxx\n&quot;);}
 /* do nothing */
.|\n     {}
</code></pre><p>the <code>/</code> in the second rule helps us to match the whole string (&ldquo;xxxx&rdquo;) but just consume the first two x. So due the maximum munch &ldquo;xxx&rdquo; won&rsquo;t be matched because it is shorter than &ldquo;xxxx&rdquo;. After consuming the first two x, the remaining two x match the first rule, so now we have two &ldquo;xx&rdquo;.</p>
<h2 id="abusing-maximun-munch-to-slow-down-the-lexer">Abusing maximun munch to slow down the lexer</h2>
<p>According to the <a href="https://westes.github.io/flex/manual/Limitations.html#Limitations">manual</a>, the following rules won&rsquo;t be matched properly</p>
<pre><code>%%
zx*/xy    {}
</code></pre><p>because the <code>zx*</code> eats up the x&rsquo;s which should belongs to <code>xy</code>.</p>
<p>Now consider such rules:</p>
<pre><code>%%
x*/xy    {printf(&quot;OK!\n&quot;);}
x           {printf(&quot;just one x&quot;);}
</code></pre><p>when <code>xxxy</code> is provided as input, since the first rule can;t be matched properly, each <code>x</code> before the <code>y</code> will be matched one by one.</p>
<p>Each time the lexer sees &ldquo;x&rdquo;, because it can probably match the first rule, so it will read one more &ldquo;x&rdquo; into the buffer and decide whether it matches, until it has read the whole input string <code>xxxy</code>. But since it can&rsquo;t be properly matched, the second rule is matched instead and now we have <code>xxy</code>. Then the same process repeats.</p>
<p>Note that this process is of $$\Theta(n)$$ where $$n$$ is the number of &ldquo;x&rdquo;. This can slow down the lexer when the input is very large. You can find more vulnerable regexes on <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a>.</p>
<p>Lastly, the above rule can be simpler:</p>
<pre><code>%%
x*y    {printf(&quot;OK!\n&quot;);}
x        {printf(&quot;just one x&quot;);}
</code></pre><p>with input &ldquo;xxxxxxxxxxxx[&hellip;]&quot;.</p>
<p>The version with lookahead was just a heuristic for coming up with the idea of how to slow down a lexer.</p>
<h2 id="appendix">Appendix</h2>
<p>It is simple if you want to try flex on linux. For instance on ubuntu, you can write your flex code inside a file with .flex extension, then you type something as input after:</p>
<pre><code>flex test.flex
gcc -ll lex.yy.c
./a.out
</code></pre><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>For simplicity, I have pruned off many details of flex syntax and focus on the regex matching part. Anyone interested can refer to the <a href="https://westes.github.io/flex/manual/index.html">flex manual</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content></item><item><title>Classic API Unhooking</title><link>https://katsuragicsl.github.io/posts/2022/04/classic-api-unhooking/</link><pubDate>Thu, 14 Apr 2022 20:54:39 +0800</pubDate><guid>https://katsuragicsl.github.io/posts/2022/04/classic-api-unhooking/</guid><description>Introduction AV and EDR use API hoooking to monitor API calls of processes. This post will take a brief look on how does a hook look like and the classic solution for malwares to bypass API hooking.
I tested the content of this blog in a windows 10 VM with BitDefender installed.
You can get the sample code here.
API hooking On the Windows VM with BitDefender installed, if you load a PE into x64dbg and look for NtMapViewOfSection, you will see the first instruction is jmp to something.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>AV and EDR use API hoooking to monitor API calls of processes. This post will take a brief look on how does a hook look like and the classic solution for malwares to bypass API hooking.</p>
<p>I tested the content of this blog in a windows 10 VM with BitDefender installed.</p>
<p>You can get the sample code <a href="https://github.com/KatsuragiCSL/classic-unhooking">here</a>.</p>
<h2 id="api-hooking">API hooking</h2>
<p><img src="/classic-api-unhooking/s1.png" alt=""></p>
<p><img src="/classic-api-unhooking/s2.png" alt=""></p>
<p>On the Windows VM with BitDefender installed, if you load a PE into x64dbg and look for <code>NtMapViewOfSection</code>, you will see the first instruction is jmp to something.<br>
This is NOT how <code>ZwMapViewOfSection</code> looks like originally, but an inline hook on this function by BitDefender.</p>
<p>BitDefender set the hook in order to perform its job before the function runs. In order to evade from BitDefender, you need to evade from this hook. The method discussed in this post is known as classic unhooking.</p>
<h2 id="creating-a-view-of-a-fresh-copy-of-ntdlldll">Creating a view of a fresh copy of ntdll.dll</h2>
<p><img src="/classic-api-unhooking/1.png" alt=""></p>
<p>This is the part responsible for creating a view of the fresh copy of ntdll.dll on disk.</p>
<p>We also need a handle of ntdll.dll which loaded into the current process. It is the one which (some of) its functions are hooked. Let&rsquo;s call it <code>pollutedNtdll</code>.</p>
<h2 id="rewrite-the-text-section">Rewrite the .text section</h2>
<p><img src="/classic-api-unhooking/2.png" alt=""></p>
<p>These few lines are for getting to the section header (and number of sections for iteration). If you are not familiar with PE structure, you could take a look at <a href="https://github.com/corkami/pics/tree/master/binary/pe101">PE101</a> which has nice pictures. You may also want to refer to MSDN pages like <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_nt_headers64">this</a>.</p>
<p>We also defined a <code>DWORD</code> variable <code>oldprotect</code> for saving the <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect">old access protection value</a>.</p>
<p><img src="/classic-api-unhooking/3.png" alt=""></p>
<p>You can get the number of sections in a PE file in the <code>IMAGE_FILE_HEADER</code> structure. We iterate through the sections and find the <code>.text</code> section.<br>
If we get it, we make the <code>.text</code> section of pollutedNtdll writable, by <code>VirtualProtect</code>.</p>
<p><img src="/classic-api-unhooking/4.png" alt=""></p>
<p>Now we can copy the <code>.text</code> section from the fresh copy of <code>ntdll.dll</code> to the one polluted.</p>
<p><img src="/classic-api-unhooking/5.png" alt=""></p>
<p>Finally make sure we recover the access protection.</p>
<h2 id="ntdlldll-unhooked">Ntdll.dll unhooked</h2>
<p>Now we set a breakpoint on an instruction after the unhooking (in this case it is where &ldquo;done!&rdquo; is printed).<br>
Run it and the breakpoint is hit:</p>
<p><img src="/classic-api-unhooking/s3.png" alt=""></p>
<p>Back to the address of <code>ZwMapViewOfSection</code>, you can see the hook is gone.</p>
<p><img src="/classic-api-unhooking/s4.png" alt=""></p>
<h2 id="afterword">Afterword</h2>
<p>First of all, as a simple sample, I did not put any effort in obfuscating my function calls/ strings etc. So the code is definitely far from ready-to-go.<br>
There will probably be posts about basic obfuscation in the future.</p>
<p>And, is it a perfect solution for API unhooking? Of course not, as it&rsquo;s called <strong>Classic</strong> unhooking :)<br>
In fact, there is a part looks suspicious when we unhooking like this, as in the EDR&rsquo;s point of view:</p>
<blockquote>
<p>Why the heck is this process reading <code>ntdll.dll</code> from disk???<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
</blockquote>
<p>Yes, normal process should not read <code>ntdll.dll</code> &ldquo;manually&rdquo;, as it should be automatically loaded. There will be posts about more advanced technique for unhooking in the future.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/">https://www.cyberbit.com/blog/endpoint-security/malware-mitigation-when-direct-system-calls-are-used/</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content></item></channel></rss>